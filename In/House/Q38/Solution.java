package In.House.Q38;

public class Solution {

    public String countAndSay(int n) {
        if (n == 1) {
            return "1";
        }
        String prev = countAndSay(n - 1);
        char c = prev.charAt(0);
        int count = 1, len = prev.length();
        StringBuilder builder = new StringBuilder();
        for (int i = 1; i < len; ++i) {
            char cur = prev.charAt(i);
            if (cur == c) {
                ++count;
            } else {
                builder.append(count);
                builder.append(c);
                count = 1;
                c = cur;
            }
        }
        builder.append(count);
        builder.append(c);
        return builder.toString();
    }

    public static void main(String[] args) {
        Solution slt = new Solution();
        System.out.println(slt.countAndSay(1)); // 1
        System.out.println(slt.countAndSay(4)); // 1211
        System.out.println(slt.countAndSay(15)); // 311311222113111231131112132112311321322112111312211312111322212311322113212221
        System.out.println(slt.countAndSay
    }

}

/**
Ques: 外观数列
Link: https://leetcode-cn.com/problems/count-and-say/

给定一个正整数n，输出外观数列的第n项。
「外观数列」是一个整数序列，从数字1开始，序列中的每一项都是对前一项的描述。
你可以将其视作是由递归公式定义的数字字符串序列：
countAndSay(1) = "1"
countAndSay(n)是对countAndSay(n-1)的描述，然后转换成另一个数字字符串。
前五项如下：
1.     1
2.     11
3.     21
4.     1211
5.     111221
第一项是数字 1
描述前一项，这个数是1，即“一个1”，记作"11"
描述前一项，这个数是11，即“二个1” ，记作"21"
描述前一项，这个数是21，即“一个2 + 一个1”，记作"1211"
描述前一项，这个数是1211，即“一个1 + 一个2 + 二个1”，记作"111221"
要描述一个数字字符串，首先要将字符串分割为最小数量的组，每个组都由连续的最多相同字符组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。
例如，数字字符串"3322251"的描述如下图（图1.png）：

示例1：
输入：n = 1
输出："1"
解释：这是一个基本样例。

示例2：
输入：n = 4
输出："1211"
解释：
countAndSay(1) = "1"
countAndSay(2) = 读"1" = 一个1 = "11"
countAndSay(3) = 读"11" = 二个1 = "21"
countAndSay(4) = 读"21" = 一个2 + 一个1 = "12" + "11" = "1211"

提示：
1 <= n <= 30
*/