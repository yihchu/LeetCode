package In.House.Q1994;

import java.util.HashMap;
import java.util.Map;

public class Solution {

    private static final long PRODUCT = 6469693230L;
    private static final int THRESHOLD = 1000000007;

    private Map<Integer, Integer> map = null;
    private int[] keys = null;

    // 不知道错在哪，就是有四五个用例过不去。
    public int numberOfGoodSubsets(int[] nums) {
        this.map = new HashMap<>();
        for (int num: nums) {
            this.map.put(num, this.map.getOrDefault(num, 0) + 1);
        }
        this.keys = this.map.keySet().stream().mapToInt(i -> i).toArray();
        long result = 0;
        for (int i = 0; i < this.keys.length; ++i) {
            if (this.keys[i] == 1) {
                continue;
            }
            result += doFind(i, PRODUCT);
        }
        return (int)(result * Math.pow(2, (double) this.map.getOrDefault(1, 0)) % THRESHOLD);
    }

    private long doFind(int idx, long pdct) {
        if (this.keys[idx] == 1 || pdct % this.keys[idx] != 0) {
            return 0;
        }
        long result = 0;
        for (int j = idx + 1; j < this.keys.length; ++j) {
            result += doFind(j, pdct / this.keys[idx]);
        }
        return this.map.get(this.keys[idx]) * (1 + result) % THRESHOLD;
    }

    public static void main(String[] args) {
        Solution slt = new Solution();
//        System.out.println(slt.numberOfGoodSubsets(new int[] {1, 2, 3, 4})); // 6
//        System.out.println(slt.numberOfGoodSubsets(new int[] {4, 2, 3, 15})); // 5
        // 520317213
//        System.out.println(slt.numberOfGoodSubsets(new int[] {10, 11, 5, 1, 10, 1, 3, 1, 26, 11, 6, 1, 1, 15, 1, 7, 22, 1, 1, 1, 1, 1, 23, 1, 29, 5, 6, 1, 1, 29, 1, 1, 21, 19, 1, 1, 1, 2, 1, 11, 1, 15, 1, 22, 14, 1, 1, 1, 1, 6, 7, 1, 14, 3, 5, 1, 22, 1, 1, 1, 17, 1, 29, 2, 1, 15, 10, 1, 5, 7, 1, 1, 1, 30, 1, 30, 1, 21, 10, 1, 1, 1, 1, 1, 2, 6, 5, 7, 3, 1, 1, 19, 29, 1, 7, 13, 14, 1, 5, 26, 19, 11, 1, 1, 1, 1, 1, 1, 1, 1, 22, 15, 1, 1, 13, 1, 17, 1, 1, 1, 13, 6, 1, 10, 1, 1, 17, 1, 1, 3, 14, 7, 17, 1, 13, 1, 1, 1, 1, 1, 11, 1, 1, 6, 1, 1, 1, 1, 1, 2, 1, 30, 2, 26, 1, 1, 14, 1, 26, 29, 30, 1, 13, 21, 1, 1, 14, 21, 1, 23, 1, 15, 23, 21, 1, 30, 19, 19, 1, 10, 23, 3, 3, 17, 22, 2, 26, 1, 11, 1, 23, 1, 1, 1, 15, 1, 1, 13, 1, 1}));
        // 894122736
        System.out.println(slt.numberOfGoodSubsets(new int[] {2, 17, 8, 1, 30, 26, 6, 2, 5, 10, 28, 15, 11, 15, 25, 24, 24, 13, 23, 27, 23, 24, 20, 1, 25, 1, 21, 23, 10, 21, 12, 14, 13, 26, 18, 21, 12, 14, 26, 8, 16, 11, 21, 8, 9, 5, 3, 25, 2, 14, 23, 23, 16, 8, 19, 5, 9, 26, 17, 15, 15, 17, 9, 18, 25, 14, 10, 30, 20, 21, 23, 19, 11, 21, 25, 8, 25, 1, 5, 17, 30, 4, 6, 2, 22, 18, 10, 18, 30, 12, 8, 6, 18, 23, 22, 4, 23, 27, 23, 27, 19, 11, 25, 20, 30, 16, 29, 1, 22, 26, 19, 2, 13, 8, 19, 23, 3, 27, 20, 18, 11, 2, 23, 3, 5, 16, 3, 23, 22, 7, 24, 25, 16, 13, 5, 17, 24, 14, 10, 19, 11, 29, 8, 16, 5, 14, 8, 26, 15, 7, 3, 11, 19, 12, 27, 24, 1, 6, 4, 16, 8, 7, 25, 12, 21, 20, 15, 25, 29, 6, 25, 5, 28, 10, 3, 27, 19, 12, 1, 13, 22, 5, 13, 5, 18, 6, 2, 10, 24, 7, 14, 7, 26, 10, 4, 17, 4, 24, 6, 5, 5, 1, 7, 5, 14, 18, 23, 10, 20, 7, 2, 28, 15, 30, 16, 8, 24, 11, 2, 4, 13, 10, 29, 11, 20, 8, 3, 17, 8, 4, 26, 26, 5, 16, 30, 7, 7, 22, 22, 14, 3, 29, 20, 17, 27, 2, 20, 23, 1, 7, 4, 16, 9, 15, 15, 23, 8, 11, 14, 18, 12, 3, 26, 27, 13, 17, 20, 27, 11, 5, 14, 12, 18, 19, 21, 20, 4, 27, 5, 17, 19, 5, 1, 18, 22, 16, 8, 29, 21, 3, 20, 17, 3, 15, 29, 4, 27, 2, 10}));
        // 870506303
//        System.out.println(slt.numberOfGoodSubsets(new int[] {1, 26, 1, 1, 21, 1, 3, 13, 1, 1, 1, 26, 29, 29, 6, 10, 29, 1, 1, 11, 15, 6, 14, 1, 17, 1, 1, 30, 21, 1, 17, 1, 1, 1, 23, 1, 7, 17, 15, 1, 1, 1, 14, 22, 11, 22, 17, 1, 19, 1, 2, 21, 29, 1, 22, 1, 1, 14, 22, 1, 14, 1, 1, 1, 1, 17, 1, 1, 1, 3, 1, 14, 19, 1, 1, 1, 1, 21, 26, 1, 1, 1, 13, 1, 1, 30, 21, 1, 1, 1, 1, 7, 1, 1, 7, 13, 6, 1, 29, 29, 1, 1, 23, 1, 19, 10, 10, 1, 1, 2, 1, 1, 23, 15, 5, 15, 1, 1, 19, 15, 1, 1, 14, 1, 7, 26, 1, 1, 2, 13, 19, 1, 3, 22, 1, 1, 29, 1, 7, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 2, 17, 1, 1, 1, 1, 1, 19, 5, 1, 1, 1, 19, 30, 23, 1, 1, 2, 1, 1, 7, 17, 1, 1, 1, 30, 21, 1, 3, 1, 5, 15, 1, 26, 1, 1, 21, 22, 19, 1, 13, 6, 15, 19, 2, 1, 1, 1, 1, 11, 17, 21, 29, 23, 26, 10, 1, 30, 1, 14, 1, 1, 21, 1, 30, 1, 1, 1, 11, 22, 19, 21, 30, 11, 14, 1, 1, 3, 7, 17, 10, 10, 3, 1, 1, 1, 10, 1, 15, 1, 15, 15, 1, 1, 1, 1, 1, 21, 14, 6, 1, 17, 1, 1, 1, 17, 10, 3, 1, 22, 21, 1, 1, 23, 19, 1, 5, 5, 5, 10, 1, 29, 1, 1, 1, 1, 7, 1, 15, 1, 6, 6, 1, 1, 1, 13, 1, 1, 29, 17, 1, 1, 1, 6, 1, 1, 2, 13, 10, 29, 1, 13, 21, 7, 10, 1, 1, 1, 7, 29, 15, 29, 17, 5, 30, 1, 11, 1, 23, 1, 1, 1, 5, 1, 30, 6, 1, 5, 6, 1, 11, 17, 26, 1, 1, 13, 1, 26, 1, 11, 13, 1, 11, 1, 1, 1, 30, 1, 1, 1, 14, 19, 1, 1, 15, 21, 1, 1, 2, 1, 1, 19, 1, 26, 1, 5, 22, 13, 1, 1, 11, 7, 29, 3, 26, 30, 19, 10, 1, 7, 1, 22, 1, 6, 2, 1, 23, 26, 1, 11, 11, 5, 1, 1, 1, 5, 6, 7, 21, 1, 1, 10, 1, 1, 29, 1, 1, 6, 19, 1, 1, 5, 1, 30, 1, 15, 1, 3, 15, 15, 23, 6, 1, 5, 1, 1, 1, 1, 3, 1, 1, 17, 7, 1, 11, 6, 13, 2, 17, 1, 3, 1, 22, 1, 1, 23, 13, 1, 3, 1, 1, 1, 1, 13, 22, 1, 22, 1, 10, 1, 23, 15, 14, 1, 30, 1, 1, 29, 17, 3, 1, 19, 1, 7, 14, 2, 1, 14, 23, 2, 30, 1, 19, 1, 1, 10, 19, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 26, 30, 26, 1, 2, 2, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 15, 21, 15, 13, 26, 1, 1, 1, 1, 21, 1, 13, 30, 1, 22, 1, 14, 1, 21, 15, 14, 21, 1, 22, 1, 1, 1, 11, 1, 6, 6, 1, 1, 1, 13, 3, 10, 23, 15, 30, 1, 1, 7, 19, 7, 1, 30, 15, 1, 7, 1, 11, 2, 17, 14, 17, 21, 1, 1, 17, 1, 3, 23, 1, 1, 11, 21, 1, 1, 1, 1, 10, 1, 11, 1, 1, 1, 1, 6, 22, 1, 1, 6, 26, 23, 1, 1, 11, 10, 1, 6, 6, 1, 26, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 1, 19, 13, 1, 1, 2, 10, 1, 26, 1, 1, 5, 3, 10, 13, 11, 17, 1, 1, 23, 1, 7, 5, 1, 1, 11, 22, 1, 23, 1, 1, 1, 29, 26, 2, 1, 19, 15, 13, 29, 1, 1, 19, 26, 1, 11, 26, 11, 1, 6, 1, 1, 26, 21, 3, 2, 1, 1, 10, 1, 1, 21, 15, 1, 1, 23, 1, 2, 5, 1, 3, 1, 1, 1, 14, 5, 1, 21, 1, 30, 11, 5, 21, 14, 14, 1, 1, 19, 10, 1, 1, 1, 1, 22, 14, 1, 7, 23, 1, 29, 23, 1, 1, 1, 17, 1, 1, 1, 15, 17, 22, 26, 1, 1, 1, 1, 1, 13, 13, 11, 1, 1, 1, 1, 5, 10, 1, 1, 1, 15, 1, 5, 1, 1, 1, 22, 1, 15, 11, 1, 1, 1, 13, 1, 1, 13, 1, 23, 1, 1, 6, 1, 6, 1, 1, 19, 1, 17, 1, 13, 1, 22, 1, 1, 1, 1, 13, 6, 1, 1, 1, 19, 7, 1, 23, 1, 1, 21, 1, 1, 6, 1, 3, 29, 21, 15, 1, 1, 1, 1, 1, 1, 1, 14, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 10, 21, 11, 17, 23, 30, 1, 30, 3, 11, 1, 1, 1, 1, 22, 2, 1, 1, 11, 6, 23, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 1, 23, 21, 3, 19, 1, 1, 26, 30, 1, 1, 1, 30, 1, 1, 1, 5, 1, 1, 1, 1, 29, 1, 7, 1, 1, 2, 1, 30, 7, 17, 7, 13, 1, 1, 29, 1, 1, 1, 1, 26, 1, 1, 6, 13, 1, 1, 1, 11, 1, 30, 1, 14, 11, 30, 1, 1, 1, 1, 1, 14, 1, 26, 6, 26, 1, 7, 23, 1, 11, 13, 2, 23, 1, 7, 22, 1, 1, 1, 5, 22, 15, 1, 11, 1, 21, 1, 1, 13, 26, 30, 1, 22, 1, 1, 14, 29, 1, 1, 1, 1, 1, 30, 2, 1, 1, 29, 1, 1, 3, 21, 11, 1, 3, 22, 5, 6, 10, 1, 1, 1, 1, 26, 11, 1, 22, 14, 1, 14, 1, 21, 1, 10, 23, 1, 13, 1, 29, 19, 1, 14, 1, 22, 1, 1, 1, 1, 29, 29, 3, 1, 1, 19, 10, 5, 1, 1, 1, 22, 1, 1, 14, 2, 1, 1, 1, 1, 23, 1, 6, 1, 1, 2, 1, 15, 10, 3, 22, 1, 1, 1, 1, 1, 1, 11, 1, 1, 5, 1, 1, 6, 30, 1, 17, 1, 1, 2, 1, 1, 5, 1, 1, 19, 10, 29, 22, 1, 10, 3, 1, 6, 1, 7, 13, 1, 3, 29, 1, 1, 1, 1, 26, 1, 1, 1, 21, 1, 29, 1, 1, 5, 1, 1, 5, 1, 1, 13, 1, 1, 1, 1, 1, 1, 22, 1, 1, 5, 1, 2, 30, 1, 14, 1, 1, 5, 1, 11, 1, 14, 11, 1, 13, 15, 11, 1, 1, 29, 5, 26, 26, 1, 1, 1, 14, 1, 1, 1, 10, 1, 1, 30, 30, 1, 6, 2, 1, 5, 1, 1, 1, 19, 13, 3, 10, 1, 1, 1, 3, 1, 1, 1, 1, 1, 15, 1, 13, 2, 1, 1, 1, 1, 6, 11, 1, 1, 1, 1, 23, 17, 22, 15, 1, 1, 3, 19, 10, 1, 7, 1, 23, 1, 1, 1, 15, 23, 11, 1, 22, 1, 19, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 5, 19, 6, 30, 1, 6, 14, 1, 1, 1, 10, 1, 7, 1, 5, 1, 1, 1, 1, 1, 15, 1, 17, 7, 7, 29, 23, 26, 6, 3, 10, 3, 2, 10, 1, 5, 22, 1, 1, 1, 1, 1, 1, 2, 30, 26, 21, 1, 1, 1, 1, 1, 1, 29, 1, 7, 1, 11, 17, 1, 6, 6, 7, 1, 17, 22, 1, 17, 1, 26, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 7, 1, 2, 30, 1, 1, 30, 17, 1, 1, 21, 30, 29, 1, 1, 1, 7, 26, 1, 14, 1, 1, 5, 1, 3, 7, 1, 1, 1, 10, 1, 15, 1, 1, 1, 1, 15, 1, 11, 1, 1, 1, 1, 29, 13, 23, 10, 1, 1, 1, 1, 5, 13, 1, 1, 1, 1, 26, 1, 1, 17, 1, 1, 1, 19, 26, 1, 1, 1, 22, 1, 23, 13, 19, 1, 29, 1, 1, 29, 30, 5, 1, 2, 1, 23, 5, 26, 1, 1, 1, 10, 1, 21, 22, 15, 1, 3, 1, 1, 1, 15, 1, 2, 1, 1, 22, 29, 1, 1, 1, 17, 19, 19, 1, 3, 1, 1, 1, 1, 22, 3, 1, 1, 6, 1, 3, 1, 1, 10, 21, 1, 1, 21, 6, 1, 1, 1, 13, 2, 5, 3, 1, 15, 15, 22, 1, 1, 1, 2, 1, 2, 3, 1, 14, 1, 1, 10, 1, 26, 13, 6, 13, 23, 14, 1, 14, 1, 3, 17, 7, 1, 17, 1, 1, 17, 1, 26, 30, 30, 10, 22, 1, 1, 3, 5, 21, 1, 1, 14, 1, 1, 1, 1, 5, 26, 1, 29, 19, 17, 23, 23, 11, 1, 7, 2, 15, 14, 1, 19, 1, 13, 1, 15, 14, 1, 29, 2, 1, 2, 26, 5, 19, 1, 14, 21, 19, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 29, 14, 1, 1, 1, 1, 7, 1, 15, 1, 21, 13, 1, 1, 13, 1, 15, 1, 6, 1, 1, 1, 1, 1, 2, 7, 1, 1, 26, 14, 3, 1, 1, 1, 1, 1, 30, 10, 1, 21, 13, 1, 1, 1, 17, 1, 19, 11, 1, 1, 1, 29, 13, 1, 1, 30, 1, 30, 1, 19, 10, 22, 10, 6, 1, 21, 15, 1, 22, 1, 1, 29, 26, 1, 19, 1, 7, 1, 1, 17, 15, 1, 7, 1, 1, 10, 22, 13, 1, 22, 1, 1, 17, 1, 26, 1, 1, 11, 1, 17, 1, 26, 1, 1, 11, 6, 1, 1, 3, 1, 3, 6, 2, 1, 1, 29, 1, 3, 13, 17, 30, 1, 1, 30, 1, 1, 1, 1, 2, 1, 1, 29, 1, 1, 14, 5, 1, 14, 5, 1, 1, 2, 2, 14, 23, 5, 10, 19, 10, 1, 1, 1, 1, 22, 1, 21, 3, 23, 1, 1, 1, 1, 15, 1, 26, 6, 1, 30, 10, 7, 15, 1, 1, 1, 1, 10, 19, 1, 2, 1, 1, 26, 1, 1, 2, 21, 1, 22, 23, 5, 29, 1, 1, 1, 30, 14, 1, 1, 1, 5, 1, 1, 1, 1, 1, 6, 1, 1, 6, 2, 1, 1, 7, 1, 1, 21, 15, 11, 1, 30, 23, 1, 1, 1, 1, 1, 17, 1, 1, 15, 1, 1, 17, 15, 10, 3, 1, 17, 1, 1, 30, 30, 1, 11, 3, 1, 1, 22, 1, 11, 2, 29, 1, 22, 14, 1, 29, 17, 2, 19, 1, 1, 1, 1, 1, 23, 3, 23, 26, 1, 6, 1, 1, 2, 3, 26, 10, 1, 7, 1, 7, 1, 5, 7, 15, 21, 1, 6, 5, 23, 7, 5, 19, 3, 11, 17, 1, 10, 1, 1, 1, 7, 1, 1, 1, 1, 29, 1, 14, 29, 1, 1, 5, 30, 1, 11, 29, 14, 19, 1, 1, 5, 1, 22, 1, 1, 7, 6, 26, 3, 21, 1, 30, 1, 13, 1, 1, 5, 1, 1, 29, 1, 1, 29, 1, 21, 1, 14, 14, 1, 29, 14, 1, 1, 14, 1, 1, 13, 26, 15, 1, 1, 23, 10, 30, 1, 1, 17, 1, 1, 1, 1, 1, 17, 2, 1, 5, 13, 23, 1, 7, 14, 1, 3, 14, 1, 1, 7, 23, 1, 23, 6, 15, 17, 1, 19, 1, 1, 17, 1, 11, 1, 19, 10, 17, 21, 1, 1, 1, 7, 1, 11, 1, 13, 1, 1, 22, 22, 7, 26, 1, 2, 21, 19, 19, 1, 30, 11, 23, 17, 1, 19, 10, 1, 29, 1, 7, 15, 1, 1, 21, 23, 11, 6, 2, 11, 30, 1, 26, 1, 2, 13, 26, 6, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 13, 1}));
    }

}

/**
Ques: 好子集的数目
Link: https://leetcode-cn.com/problems/the-number-of-good-subsets/

给你一个整数数组nums。如果nums的一个子集中，所有元素的乘积可以表示为一个或多个互不相同的质数的乘积，那么我们称它为好子集。
比方说，如果nums = [1, 2, 3, 4]：
[2, 3]，[1, 2, 3]和[1, 3]是好子集，乘积分别为6 = 2 * 3，6 = 2 * 3和3 = 3。
[1, 4]和[4]不是好子集，因为乘积分别为4 = 2 * 2和4 = 2 * 2。
请你返回nums中不同的好子集的数目对10*9 + 7取余的结果。
nums中的子集是通过删除nums中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的下标不同，那么它们被视为不同的子集。

示例1：
输入：nums = [1, 2, 3, 4]
输出：6
解释：好子集为：
- [1, 2]：乘积为2，可以表示为质数2的乘积。
- [1, 2, 3]：乘积为6，可以表示为互不相同的质数2和3的乘积。
- [1, 3]：乘积为3，可以表示为质数3的乘积。
- [2]：乘积为2，可以表示为质数2的乘积。
- [2, 3]：乘积为6，可以表示为互不相同的质数2和3的乘积。
- [3]：乘积为3，可以表示为质数3的乘积。

示例2：
输入：nums = [4, 2, 3, 15]
输出：5
解释：好子集为：
- [2]：乘积为2，可以表示为质数2的乘积。
- [2, 3]：乘积为6，可以表示为互不相同质数2和3的乘积。
- [2, 15]：乘积为30，可以表示为互不相同质数2，3和5的乘积。
- [3]：乘积为3，可以表示为质数3的乘积。
- [15]：乘积为15，可以表示为互不相同质数3和5的乘积。

提示：
1 <= nums.length <= 10^5
1 <= nums[i] <= 30

*/
