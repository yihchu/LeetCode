# Write your MySQL query statement below

select format(Score, 2), DENSE_RANK() over (order by score desc) `Rank`
from Scores;



# RANK 排名，遇到并列，序号会跳。
# DENSE_RANK 排名，遇到并列，顺序排序。
# ROW_NUMBER 行号。

# format 截断，返回是string类型
# round 四舍五入

/**
SQL架构
编写一个SQL查询来实现分数排名。
如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
例如，根据上述给定的Scores表，你的查询应该返回（按分数从高到低排列）：

+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+
重要提示：对于MySQL解决方案，如果要转义用作列名的保留字，可以在关键字之前和之后使用撇号。例如 `Rank`
*/
输入：
{"headers": {"Scores": ["Id", "Score"]}, "rows": {"Scores": [[1, 3.50], [2, 3.65], [3, 4.00], [4, 3.85], [5, 4.00], [6, 3.65]]}}
输出：
{"headers": ["Score", "Rank"], "values": [[4.00, 1], [4.00, 2], [3.85, 3], [3.65, 4], [3.65, 5], [3.50, 6]]}
{"headers": ["Score", "Rank"], "values": [[4.0,1],[4.0,1],[3.85,2],[3.65,3],[3.65,3],[3.5,4]]}